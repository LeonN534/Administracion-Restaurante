
package restaurante;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JComboBox;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.Date;
import java.sql.Time;
import javax.swing.DefaultCellEditor;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import static restaurante.Restaurante.PASSWORD;
import static restaurante.Restaurante.URL;
import static restaurante.Restaurante.USERNAME;

public class VentanaVenderPlatos extends javax.swing.JFrame {

    DefaultTableModel model;
    Connection connection = null;
    
    public VentanaVenderPlatos() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setText("DNI del cliente");

        jLabel3.setText("Importe (soles)");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"", "0", "0", "0"}
            },
            new Object [] {
                "IDplato", "Plato", "Cantidad", "Precio Unitario", "Subtotal"
            })
            {
                // Hacer que la columna 3 (índice 2) no sea editable
                @Override
                public boolean isCellEditable(int row, int column) {
                    return column != 0 && column != 3 && column != 4; // Puedes ajustar el índice de la columna que deseas hacer no editable
                }
            }
        );
        JComboBox<String> comboBox = new JComboBox<>();

        try {
            connection = DriverManager.getConnection(URL, USERNAME, PASSWORD);
            // If no exception is thrown, the connection is successful.
            Statement statement = connection.createStatement();
            String selectQuery = "SELECT Nombre FROM Platos";
            ResultSet resultSet = statement.executeQuery(selectQuery);

            // Process the results
            while (resultSet.next()) {

                String name = resultSet.getString("Nombre"); // Replace with your column names

                comboBox.addItem(name);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        comboBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int selectedRow = jTable1.getSelectedRow();
                int selectedColumn = jTable1.getSelectedColumn();
                try {
                    connection = DriverManager.getConnection(URL, USERNAME, PASSWORD);
                    // If no exception is thrown, the connection is successful.
                    Statement statement = connection.createStatement();
                    String selectQuery = "SELECT Precio, IdPlato FROM Platos WHERE Nombre = '" + comboBox.getSelectedItem() + "'";
                    ResultSet resultSet = statement.executeQuery(selectQuery);

                    if (selectedColumn == 1) {
                        jTable1.setValueAt(comboBox.getSelectedItem(), selectedRow, selectedColumn);

                        // Move the cursor to the first row in the ResultSet
                        if (resultSet.next()) {
                            jTable1.setValueAt(resultSet.getString("Precio"), selectedRow, 3);
                            jTable1.setValueAt(resultSet.getString("IdPlato"), selectedRow, 0);

                        }
                    }
                } catch (SQLException ex) {
                    ex.printStackTrace();
                } finally {
                    if (connection != null) {
                        try {
                            connection.close();
                        } catch (SQLException ex) {
                            ex.printStackTrace();
                        }
                    }
                }
            }
        });

        jTable1.getColumnModel().getColumn(1).setCellEditor(new DefaultCellEditor(comboBox));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel4.setFont(new java.awt.Font("sansserif", 1, 13)); // NOI18N
        jLabel4.setText("TOTAL:");

        jLabel5.setFont(new java.awt.Font("sansserif", 1, 13)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        jLabel6.setFont(new java.awt.Font("sansserif", 1, 13)); // NOI18N
        jLabel6.setText("REGISTRAR VENTA");

        jButton2.setText("CANCELAR");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setText("REGISTRAR VENTA");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("+ Plato");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("sansserif", 1, 13)); // NOI18N
        jLabel1.setText("VUELTO:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(37, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jButton2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jButton1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1)
                            .addGap(18, 18, 18)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(41, 41, 41)
                            .addComponent(jLabel4)
                            .addGap(18, 18, 18)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 960, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(49, 49, 49)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                                    .addComponent(jTextField3))
                                .addGap(171, 171, 171)
                                .addComponent(jButton3)))))
                .addGap(33, 33, 33))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addComponent(jLabel6)
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2)
                    .addComponent(jButton1)
                    .addComponent(jLabel1)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.dispose();
        Menu ventanaMenu = new Menu();
        ventanaMenu.setLocationRelativeTo(null);
        ventanaMenu.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed
    
    private static int obtenerProximoNumeroGrupo() {
        // Consultar la base de datos para obtener el máximo número de grupo actual
        String consultaMaxNumeroGrupo = "SELECT MAX(serieVenta) FROM Ventas";
        int maxNumeroGrupo = 0;

        try (Connection conexión = DriverManager.getConnection(URL, USERNAME, PASSWORD);
             PreparedStatement declaración = conexión.prepareStatement(consultaMaxNumeroGrupo);
             ResultSet resultado = declaración.executeQuery()) {

            if (resultado.next()) {
                // Manejar el caso de NULL (tabla vacía)
                maxNumeroGrupo = (resultado.getInt(1) == 0) ? 0 : resultado.getInt(1);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }

        // Incrementar el máximo número de grupo para obtener el próximo número único
        return maxNumeroGrupo + 1;
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if(jTextField2.getText().isBlank() || jTextField3.getText().isBlank()) {
            JOptionPane.showMessageDialog(this, "Rellene todos los campos");
        } else {
            if(esNumero(jTextField3.getText())) {
                if(Double.parseDouble(jLabel5.getText()) > Double.parseDouble(jTextField3.getText())) {
                    JOptionPane.showMessageDialog(this, "El importe debe ser mayor o igual al costo total");
                } else {
                    String consultaSQL = "SELECT COUNT(*) FROM Cliente WHERE idCliente = ?";
                    try (Connection conexión = DriverManager.getConnection(URL, USERNAME, PASSWORD);
                        PreparedStatement declaración = conexión.prepareStatement(consultaSQL)) {

                        // Establecer el valor del parámetro en la consulta preparada
                        declaración.setString(1, jTextField2.getText());

                        // Ejecutar la consulta
                        ResultSet resultado = declaración.executeQuery();

                        // Verificar el resultado
                        if (resultado.next()) {
                            int count = resultado.getInt(1);
                            if (count > 0) {
                                // Venta
                                DefaultTableModel modeloTabla = (DefaultTableModel) jTable1.getModel(); // Reemplaza 'tuJTable' con el nombre de tu JTable
                                    // Verificar si hay filas en la tabla
                                    if (modeloTabla.getRowCount() > 0) {
                                        try (Connection conexión2 = DriverManager.getConnection(URL, USERNAME, PASSWORD)) {
                                            // Obtener el próximo número único para el grupo
                                            int nuevoNumeroGrupo = obtenerProximoNumeroGrupo();
                                            java.util.Date fechaActual = new java.util.Date();
                                            Date fechaSQL = new Date(fechaActual.getTime());
                                            Time tiempoSQL = new Time(fechaActual.getTime());
                                            // Iterar sobre las filas de la JTable
                                            for (int fila = 0; fila < modeloTabla.getRowCount(); fila++) {
                                                // Insertar cada fila en la tabla de ventas con el mismo número de grupo
                                                String insercionSQL = "INSERT INTO Ventas (serieVenta, idCliente, fechaVenta, horaVenta, idPlato, precio, cantidad, importe) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
                                                try (PreparedStatement insercionDeVenta = conexión.prepareStatement(insercionSQL)) {
                                                    insercionDeVenta.setInt(1, nuevoNumeroGrupo); // Número único del grupo
                                                    insercionDeVenta.setString(2, jTextField2.getText());
                                                    insercionDeVenta.setDate(3, fechaSQL);
                                                    insercionDeVenta.setTime(4, tiempoSQL);
                                                    insercionDeVenta.setInt(5,  Integer.parseInt(modeloTabla.getValueAt(fila, 0).toString())); // Número único del grupo
                                                    insercionDeVenta.setString(6, (String) modeloTabla.getValueAt(fila, 3)); 
                                                    insercionDeVenta.setString(7, (String) modeloTabla.getValueAt(fila, 2)); 
                                                    insercionDeVenta.setString(8, jTextField3.getText()); 


                                                    
                                                    int filasInsertadas = insercionDeVenta.executeUpdate();
                                                }
                                            }

                                            JOptionPane.showMessageDialog(null, "Venta realizada correctamente. A continuación se mostrará la boleta de venta.");
                                            
                                            Boleta ventanboleta = new Boleta(nuevoNumeroGrupo, jTextField2.getText(), fechaSQL);
                                            ventanboleta.setLocationRelativeTo(null);
                                            ventanboleta.setVisible(true);
                                            this.dispose();

                                        } catch (SQLException e) {
                                            e.printStackTrace();
                                            JOptionPane.showMessageDialog(null, "Error al realizar la venta: " + e.getMessage());
                                        }
                                    } else {
                                        JOptionPane.showMessageDialog(null, "Debe ingresar un plato en la tabla");
                                    }
                           } else {
                                JOptionPane.showMessageDialog(this, "No existe un cliente registrado con el DNI especificado");
                           }
                       }

                    } catch (SQLException e) {
                        e.printStackTrace();
                    }

                }
            } else {
                JOptionPane.showMessageDialog(this, "El importe debe ser un número");
            }
            
        }
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        model = (DefaultTableModel) jTable1.getModel();
        model.addRow(new Object[]{"", "0", "0", "0"});
    }//GEN-LAST:event_jButton3ActionPerformed

    private static boolean verificarCampo(String texto) {
        if (texto.length() == 8 && esNumero(texto)) return true;
        return false;
    }

    private static boolean esNumero(String texto) {
        return texto.matches("\\d*");
    }
    
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        float floatValue1 = 0, floatValue2 = 0;
        model = (DefaultTableModel) jTable1.getModel();
            int selectedRow = jTable1.getSelectedRow();
            if (selectedRow >= 0) {
                Object value1;
                Object value2;

                // Get the values from columns 1 and 2 of the selected row
                value1 = jTable1.getValueAt(selectedRow, 2);
                value2 = jTable1.getValueAt(selectedRow, 3);


                if (value1 != null) {
                    try {
                        floatValue1 = Float.parseFloat(value1.toString());
                        // Now, 'floatValue' contains the float representation of the value in column 4
                    } catch (ClassCastException e) {
                        // Handle the case where the value in column 4 cannot be converted to a float
                        // For example, if it's not a numeric value
                    }
                }
                
                if (value2 != null) {
                    try {
                        floatValue2 = Float.parseFloat(value2.toString());
                        // Now, 'floatValue' contains the float representation of the value in column 4
                    } catch (ClassCastException e) {
                        // Handle the case where the value in column 4 cannot be converted to a float
                        // For example, if it's not a numeric value
                    }
                }

            

                // Calculate the product
                float product = floatValue1 * floatValue2;

                // Set the product value in column 4 of the selected row
                model.setValueAt(product, selectedRow, 4);
            }
            
            double sum = 0.0; // Initialize the sum to 0

            for (int i = 0; i < jTable1.getRowCount(); i++) {
                Object value = jTable1.getValueAt(i, 4);
                if (value instanceof Number) {
                    sum += ((Number) value).doubleValue();
                }
            }
            jLabel5.setText(Double.toString(sum));
            if(jLabel5.getText() != null && !jLabel5.getText().isBlank()&& jTextField3.getText() != null && !jTextField3.getText().isBlank()) {
                double vuelto = Double.valueOf(jTextField3.getText()) - sum;
                jLabel7.setText(String.valueOf(vuelto));
            }
    }//GEN-LAST:event_jTable1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaVenderPlatos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaVenderPlatos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaVenderPlatos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaVenderPlatos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaVenderPlatos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
