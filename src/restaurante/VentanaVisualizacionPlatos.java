/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package restaurante;

import java.awt.Image;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import static restaurante.Restaurante.PASSWORD;
import static restaurante.Restaurante.URL;
import static restaurante.Restaurante.USERNAME;

public class VentanaVisualizacionPlatos extends javax.swing.JFrame {

    DefaultTableModel model;
    String nombrePlatoTemporal = "";
    String pathPlatoTemporal = "";

    
    public VentanaVisualizacionPlatos() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "Nombre", "Descripción del plato", "Dificultad", "Precio", "Categoría", "Encargado", "Descripción de la categoría"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel2.setFont(new java.awt.Font("sansserif", 1, 13)); // NOI18N
        jLabel2.setText("BUSCAR POR:");

        jLabel3.setText("Categoría de plato");

        jButton1.setText("VER RECETA");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("CERRAR");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        Connection connection = null;
        try {
            connection = DriverManager.getConnection(URL, USERNAME, PASSWORD);
            // If no exception is thrown, the connection is successful.
            Statement statement = connection.createStatement();
            String selectQuery = "SELECT NombreCat FROM Categorias";
            ResultSet resultSet = statement.executeQuery(selectQuery);

            // Process the results
            while (resultSet.next()) {

                String name = resultSet.getString("NombreCat"); // Replace with your column names

                jComboBox1.addItem(name);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jButton3.setText("BUSCAR");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("VER IMAGEN DEL PLATO");
        jButton4.setEnabled(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addGap(18, 18, 18)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jButton2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jButton1))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 1000, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(58, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton4))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        Connection connection = null;
        try {
            connection = DriverManager.getConnection(URL, USERNAME, PASSWORD);
            // If no exception is thrown, the connection is successful.
            Statement statement = connection.createStatement();
            String seleccion = jComboBox1.getSelectedItem().toString();
            model = (DefaultTableModel) jTable1.getModel();
            String selectQuery;
            ResultSet resultSet;

            switch (seleccion) {
                case "Ensalada":
                selectQuery = "SELECT Platos.Nombre, Platos.DescripcionPlato, Platos.Dificultad, " +
                "Platos.Precio, Platos.Categoria, Categorias.Encargado, " +
                "Categorias.DescripcionCategoria " +
                "FROM Restaurante.Platos " +
                "INNER JOIN Restaurante.Categorias ON Platos.Categoria = Categorias.NombreCat " +
                "WHERE Platos.Categoria = 'Ensalada'";
                resultSet = statement.executeQuery(selectQuery);
                while (model.getRowCount() > 0) {
                    model.removeRow(0);
                }

                // Populate the table model with data from the database
                while (resultSet.next()) {
                    model.addRow(new Object[]{resultSet.getString("Nombre"),
                        resultSet.getString("DescripcionPlato"),
                        resultSet.getString("Dificultad"),
                        resultSet.getString("Precio"),
                        resultSet.getString("Categoria"),
                        resultSet.getString("Encargado"),
                        resultSet.getString("DescripcionCategoria")});
            }
            break;

            case "Guarnición":
            selectQuery = "SELECT Platos.Nombre, Platos.DescripcionPlato, Platos.Dificultad, " +
            "Platos.Precio, Platos.Categoria, Categorias.Encargado, " +
            "Categorias.DescripcionCategoria " +
            "FROM Restaurante.Platos " +
            "INNER JOIN Restaurante.Categorias ON Platos.Categoria = Categorias.NombreCat " +
            "WHERE Platos.Categoria = 'Guarnición'";
            resultSet = statement.executeQuery(selectQuery);
            while (model.getRowCount() > 0) {
                model.removeRow(0);
            }

            // Populate the table model with data from the database
            while (resultSet.next()) {
                model.addRow(new Object[]{resultSet.getString("Nombre"),
                    resultSet.getString("DescripcionPlato"),
                    resultSet.getString("Dificultad"),
                    resultSet.getString("Precio"),
                    resultSet.getString("Categoria"),
                    resultSet.getString("Encargado"),
                    resultSet.getString("DescripcionCategoria")});
        }
        break;

        case "Plato Fuerte":
        selectQuery = "SELECT Platos.Nombre, Platos.DescripcionPlato, Platos.Dificultad, " +
        "Platos.Precio, Platos.Categoria, Categorias.Encargado, " +
        "Categorias.DescripcionCategoria " +
        "FROM Restaurante.Platos " +
        "INNER JOIN Restaurante.Categorias ON Platos.Categoria = Categorias.NombreCat " +
        "WHERE Platos.Categoria = 'Plato Fuerte'";
        resultSet = statement.executeQuery(selectQuery);
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }

        // Populate the table model with data from the database
        while (resultSet.next()) {
            model.addRow(new Object[]{resultSet.getString("Nombre"),
                resultSet.getString("DescripcionPlato"),
                resultSet.getString("Dificultad"),
                resultSet.getString("Precio"),
                resultSet.getString("Categoria"),
                resultSet.getString("Encargado"),
                resultSet.getString("DescripcionCategoria")});
        }
        break;

        case "Postre":
        selectQuery = "SELECT Platos.Nombre, Platos.DescripcionPlato, Platos.Dificultad, " +
        "Platos.Precio, Platos.Categoria, Categorias.Encargado, " +
        "Categorias.DescripcionCategoria " +
        "FROM Restaurante.Platos " +
        "INNER JOIN Restaurante.Categorias ON Platos.Categoria = Categorias.NombreCat " +
        "WHERE Platos.Categoria = 'Postre'";
        resultSet = statement.executeQuery(selectQuery);
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }

        // Populate the table model with data from the database
        while (resultSet.next()) {
            model.addRow(new Object[]{resultSet.getString("Nombre"),
                resultSet.getString("DescripcionPlato"),
                resultSet.getString("Dificultad"),
                resultSet.getString("Precio"),
                resultSet.getString("Categoria"),
                resultSet.getString("Encargado"),
                resultSet.getString("DescripcionCategoria")});
        }
        break;

        case "Snack":
        selectQuery = "SELECT Platos.Nombre, Platos.DescripcionPlato, Platos.Dificultad, " +
        "Platos.Precio, Platos.Categoria, Categorias.Encargado, " +
        "Categorias.DescripcionCategoria " +
        "FROM Restaurante.Platos " +
        "INNER JOIN Restaurante.Categorias ON Platos.Categoria = Categorias.NombreCat " +
        "WHERE Platos.Categoria = 'Snack'";
        resultSet = statement.executeQuery(selectQuery);
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }

        // Populate the table model with data from the database
        while (resultSet.next()) {
            model.addRow(new Object[]{resultSet.getString("Nombre"),
                resultSet.getString("DescripcionPlato"),
                resultSet.getString("Dificultad"),
                resultSet.getString("Precio"),
                resultSet.getString("Categoria"),
                resultSet.getString("Encargado"),
                resultSet.getString("DescripcionCategoria")});
        }
        break;

        case "Sopas y Caldos":
        selectQuery = "SELECT Platos.Nombre, Platos.DescripcionPlato, Platos.Dificultad, " +
        "Platos.Precio, Platos.Categoria, Categorias.Encargado, " +
        "Categorias.DescripcionCategoria " +
        "FROM Restaurante.Platos " +
        "INNER JOIN Restaurante.Categorias ON Platos.Categoria = Categorias.NombreCat " +
        "WHERE Platos.Categoria = 'Sopas y Caldos'";
        resultSet = statement.executeQuery(selectQuery);
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }

        // Populate the table model with data from the database
        while (resultSet.next()) {
            model.addRow(new Object[]{resultSet.getString("Nombre"),
                resultSet.getString("DescripcionPlato"),
                resultSet.getString("Dificultad"),
                resultSet.getString("Precio"),
                resultSet.getString("Categoria"),
                resultSet.getString("Encargado"),
                resultSet.getString("DescripcionCategoria")});
        }
        break;
        default:
        selectQuery = "SELECT Platos.Nombre, Platos.DescripcionPlato, Platos.Dificultad, " +
        "Platos.Precio, Platos.Categoria, Categorias.Encargado, " +
        "Categorias.DescripcionCategoria " +
        "FROM Restaurante.Platos " +
        "INNER JOIN Restaurante.Categorias " +
        "ON Restaurante.Platos.Categoria = Categorias.NombreCat";
        resultSet = statement.executeQuery(selectQuery);
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }

        // Populate the table model with data from the database
        while (resultSet.next()) {
            model.addRow(new Object[]{resultSet.getString("Nombre"),
                resultSet.getString("DescripcionPlato"),
                resultSet.getString("Dificultad"),
                resultSet.getString("Precio"),
                resultSet.getString("Categoria"),
                resultSet.getString("Encargado"),
                resultSet.getString("DescripcionCategoria")});
        }
        }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.dispose();
        Menu principal = new Menu();
        principal.setLocationRelativeTo(principal);
        principal.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        model = (DefaultTableModel) jTable1.getModel();
        String valor = jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString();
        Receta ventanaReceta = new Receta(valor);
        ventanaReceta.setLocationRelativeTo(null);
        ventanaReceta.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        model = (DefaultTableModel) jTable1.getModel();
        String valor = jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString();
        Connection connection = null;
        try {
            connection = DriverManager.getConnection(URL, USERNAME, PASSWORD);
            Statement statement = connection.createStatement();
            // If no exception is thrown, the connection is successful.
            String selectQuery = "SELECT Archivo, Nombre FROM Restaurante.Platos WHERE Nombre = '" + valor + "'";
            ResultSet resultSet = statement.executeQuery(selectQuery);
            if (resultSet.next()) {
                // Move the cursor to the first row (if it exists)
                jButton4.setEnabled(true);
                jButton1.setEnabled(true);               
                pathPlatoTemporal = "ImagenesPlatos/" + resultSet.getString("Archivo") + ".jpg";
                nombrePlatoTemporal = resultSet.getString("Nombre");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        ImagenPlato verImagenPlato = new ImagenPlato(this, false, nombrePlatoTemporal, pathPlatoTemporal);
        verImagenPlato.setLocationRelativeTo(null);
        verImagenPlato.setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaVisualizacionPlatos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaVisualizacionPlatos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaVisualizacionPlatos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaVisualizacionPlatos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaVisualizacionPlatos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
